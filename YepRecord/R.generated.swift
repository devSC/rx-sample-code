// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generated, and contains references to static resources.
struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 4 images.
  struct image {
    /// Image `button_voice_pause`.
    static let button_voice_pause = ImageResource(bundle: _R.hostingBundle, name: "button_voice_pause")
    /// Image `button_voice_play`.
    static let button_voice_play = ImageResource(bundle: _R.hostingBundle, name: "button_voice_play")
    /// Image `button_voice_reset`.
    static let button_voice_reset = ImageResource(bundle: _R.hostingBundle, name: "button_voice_reset")
    /// Image `voice_indicator`.
    static let voice_indicator = ImageResource(bundle: _R.hostingBundle, name: "voice_indicator")
    
    /// `UIImage(named: "button_voice_pause", bundle: ..., traitCollection: ...)`
    static func button_voice_pause(compatibleWith traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.button_voice_pause, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "button_voice_play", bundle: ..., traitCollection: ...)`
    static func button_voice_play(compatibleWith traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.button_voice_play, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "button_voice_reset", bundle: ..., traitCollection: ...)`
    static func button_voice_reset(compatibleWith traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.button_voice_reset, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "voice_indicator", bundle: ..., traitCollection: ...)`
    static func voice_indicator(compatibleWith traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.voice_indicator, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `NewFeedVoiceRecord`.
    static let newFeedVoiceRecord = _R.storyboard.newFeedVoiceRecord()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "NewFeedVoiceRecord", bundle: ...)`
    static func newFeedVoiceRecord(_: Void = ()) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.newFeedVoiceRecord)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  static let hostingBundle = Bundle(identifier: "gg.swift.t.RxYepRecord") ?? Bundle.main
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try newFeedVoiceRecord.validate()
    }
    
    struct launchScreen: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    struct newFeedVoiceRecord: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let name = "NewFeedVoiceRecord"
      let newFeedVoiceRecordViewController = StoryboardViewControllerResource<NewFeedVoiceRecordViewController>(identifier: "NewFeedVoiceRecordViewController")
      
      func newFeedVoiceRecordViewController(_: Void = ()) -> NewFeedVoiceRecordViewController? {
        return UIStoryboard(resource: self).instantiateViewController(withResource: newFeedVoiceRecordViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "button_voice_reset") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button_voice_reset' is used in storyboard 'NewFeedVoiceRecord', but couldn't be loaded.") }
        if UIImage(named: "voice_indicator") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'voice_indicator' is used in storyboard 'NewFeedVoiceRecord', but couldn't be loaded.") }
        if UIImage(named: "button_voice_play") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button_voice_play' is used in storyboard 'NewFeedVoiceRecord', but couldn't be loaded.") }
        if _R.storyboard.newFeedVoiceRecord().newFeedVoiceRecordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newFeedVoiceRecordViewController' could not be loaded from storyboard 'NewFeedVoiceRecord' as 'NewFeedVoiceRecordViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}